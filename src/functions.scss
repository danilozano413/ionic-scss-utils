@import 'scss-colors-variables/src/functions';
@import 'variables';

/// Triangle helper mixin
/// @param {Direction} $direction - Triangle direction, either `top`, `right`, `bottom` or `left`
/// @param {Color} $color [currentcolor] - Triangle color
/// @param {Length} $size [1em] - Triangle size
@mixin triangle($direction: top, $color: currentcolor, $size: 1em) {
    @if not index(top right bottom left, $direction) {
        @error "Direction must be either `top`, `right`, `bottom` or `left`.";
    }

    width: 0;
    height: 0;
    content: '';
    z-index: 2;
    border-#{opposite-position($direction)}: ($size * 1.5) solid $color;

    $perpendicular-borders: $size solid transparent;

    @if $direction == top or $direction == bottom {
        border-left: $perpendicular-borders;
        border-right: $perpendicular-borders;
    } @else if $direction == right or $direction == left {
        border-bottom: $perpendicular-borders;
        border-top: $perpendicular-borders;
    }
}

@mixin media-min($size) {
    @media (min-width: #{map-get($screen-breakpoints,$size)}) {
        @content;
    }
}

@mixin media-max($size) {
    @media (max-width: #{map-get($screen-breakpoints,$size)}) {
        @content;
    }
}

@mixin media-landscape() {
    @media screen and (orientation: landscape) {
        @content;
    }
}

@mixin media-portrait() {
    @media screen and (orientation: portrait) {
        @content;
    }
}

@function pow($number, $exponent) {
    $value: 1;

    @if $exponent > 0 {
        @for $i from 1 through $exponent {
            $value: $value * $number;
        }
    }

    @return $value;
}

/// Apply property value and adds class to force it
/// @param {String} $property  Css property name
/// @return {String} $value value to set
@mixin andForce($property, $value) {
    #{$property}: #{$value};
    &-f,
    &--force {
        #{$property}: #{$value} !important;
    }
}

/// Apply property modify exponential and adds class to force it
/// @param {String} $property  Css property name
@mixin addExponential($property) {
    &-#{'x'} {
        @for $i from 0 through 12 {
            &#{$i} {
                @include andForce(#{$property}, #{#{pow(2, $i)}#{'px'}});
            }
        }
    }
}
@mixin addRemScale($property) {
    @for $i from 0 through 15 {
        &-#{$i} {
            @include andForce(#{$property}, #{#{$i}#{'rem'}});

            @for $o from 0 through 9 {
                &_#{$o} {
                    @include andForce(#{$property}, #{#{$i}#{'.'}#{$o}#{'rem'}});
                }
            }
        }
    }
}

@mixin addPositions($property) {
    @each $positionAbbr, $position in $positions {
        &#{$positionAbbr} {
            @content;
            @include addRemScale(#{#{$property}#{'-'}#{$position}});
            @include addExponential(#{#{$property}#{'-'}#{$position}});
        }
    }
}

@mixin addAxis($property) {
    &#{'x'} {
        @content;
        @include addRemScale(#{#{$property}#{'-'}#{'left'}});
        @include addRemScale(#{#{$property}#{'-'}#{'right'}});
        @include addExponential(#{#{$property}#{'-'}#{'left'}});
        @include addExponential(#{#{$property}#{'-'}#{'right'}});
    }
    // Axis Y
    &#{'y'} {
        @content;
        @include addRemScale(#{#{$property}#{'-'}#{'top'}});
        @include addRemScale(#{#{$property}#{'-'}#{'bottom'}});
        @include addExponential(#{#{$property}#{'-'}#{'top'}});
        @include addExponential(#{#{$property}#{'-'}#{'bottom'}});
    }
}

@mixin addBreakpoints($property) {
    // Media Breakpoints
    @each $keySize, $valueSize in $screen-breakpoints {
        @include media-min($keySize) {
            &-#{$keySize} {
                @content;
                @include addRemScale(#{$property});
                @include addAxis(#{$property});
                @include addPositions(#{$property});
                @include addExponential(#{$property});
            }
        }
    }
}

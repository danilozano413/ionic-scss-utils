@import '~scss-colors-variables';
@import '../functions.scss';

@mixin ionColorVariables($name, $scheme: light) {
    //base
    --ion-color-#{'' + $name}: var(--color-#{'' + $name}, #{color($name, 'base', $scheme)});
    // rgb
    --ion-color-#{'' + $name}-rgb: var(--color-#{'' + $name}-rgb, #{parseRgb(color($name, 'base', $scheme))});

    //contrast
    --ion-color-#{'' + $name}-contrast: var(
        --color-#{'' + $name}-contrast,
        var(--color-#{opposed($name, $scheme)}, #{color(opposed($name, $scheme), 'base', $scheme)})
    );
    //contrast rgb
    --ion-color-#{'' + $name}-contrast-rgb: var(
        --color-#{'' + $name}-contrast-rgb,
        #{parseRgb(color(opposed($name, $scheme), 'base', $scheme))}
    );
}

@mixin ionColorConfigVariables($name, $config: base, $scheme: light) {
    // variation
    --ion-color-#{'' + $name}-#{'' + $config}: var(
        --color-#{'' + $name}-#{'' + $config},
        #{color($name, $config, $scheme)}
    );
    // rgb
    --ion-color-#{'' + $name}-#{'' + $config}-rgb: var(
        --color-#{'' + $name}-#{'' + $config}-rgb,
        #{parseRgb(color($name, $config, $scheme))}
    );

    //contrast
    --ion-color-#{'' + $name}-#{'' + $config}-contrast: var(
        --color-#{'' + $name}-#{'' + $config}-contrast,
        var(--color-#{'' + $name}-#{opposedConfig($config)}, color($name, opposedConfig($config), $scheme))
    );
    // contrast rgb
    --ion-color-#{'' + $name}-#{'' + $config}-contrast-rgb: var(
        --color-#{'' + $name}-#{'' + $config}-contrast-rgb,
        #{parseRgb(color($name, opposedConfig($config), $scheme))}
    );
}

@mixin colorContent($name, $scheme: light) {
    @include colorVariables($name, $scheme);
    @include ionColorVariables($name, $scheme);
    @each $config, $value in $colors_config {
        @include colorConfigVariables($name, $config, $scheme);
        @include ionColorConfigVariables($name, $config, $scheme);
    }
}

// root color variables
:root,
body {
    @each $name, $color in $colors_base {
        @include colorContent($name);
    }
}

// media theme
@each $scheme, $variables in $colors_scheme {
    @media (prefers-color-scheme: #{$scheme}) {
        body {
            @each $name, $color in map-get($variables, 'colors') {
                @include colorContent($name, $scheme);
            }
        }
    }
}

// theme colors fallback by class
body {
    @each $scheme, $variables in $colors_scheme {
        &.#{$scheme} {
            @each $name, $color in map-get($variables, 'colors') {
                @include colorContent($name, $scheme);
            }
        }
    }
}

// colors classes
.ion-color {
    @each $name, $color in $colors_base {
        &-#{'' + $name},
        &--#{'' + $name} {
            //base
            --ion-color-base: var(--ion-color-#{'' + $name}, #{color($name)}) !important;
            // rgb
            --ion-color-base-rgb: var(--ion-color-#{'' + $name}-rgb, #{parseRgb(color($name))}) !important;
            //contrast
            --ion-color-contrast: var(
                --ion-color-#{'' + $name}-contrast,
                var(--ion-color-#{opposed($name)}, #{color(opposed($name))})
            ) !important;
            //contrast rgb
            --ion-color-contrast-rgb: var(
                --ion-color-#{'' + $name}-contrast-rgb,
                #{parseRgb(color(opposed($name)))}
            ) !important;

            @each $config, $value in $colors_config {
                --ion-color-#{'' + $config}: var(
                    --ion-color-#{'' + $name}-#{'' + $config},
                    #{color($name, $config)}
                ) !important;
            }
        }
    }
}
